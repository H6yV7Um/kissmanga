diff --git a/index.js b/index.js
index 75c3891..ab0d832 100644
--- a/index.js
+++ b/index.js
@@ -8,6 +8,28 @@ var pageTo = ( process.argv.length > 3 ? process.argv[3] : 9999 );
 var pageFrom = parseInt( pageFrom ) || 1;
 var pageTo = parseInt( pageTo ) || 9999;
 
+var chapterDelay = 0;
+var pageDelay = 5000;
+
+/**
+ * 
+ * @param {*} uri 
+ */
+function mangaIdenifier( uri ) {
+    return url.parse( uri ).pathname.split( '/' )[2];
+}
+
+/**
+ * 
+ * @param {*} uri 
+ */
+function chapterIdentifier( uri ) {
+    let parts = url.parse( uri, true );
+    let name = parts.pathname.split( '/' )[3];
+    let id = parts.query['id'];
+    return ( id ? id : name );
+}
+
 /**
  * Helper function to recursively create all non-existing folders of the given path.
  */
@@ -39,21 +61,37 @@ function saveFileJSON( file, content, callback ) {
 
 /**
  * 
- * @param {*} uri 
+ * @param {*} mangaListWeb 
  */
-function mangaIdenifier( uri ) {
-    return url.parse( uri ).pathname.split( '/' )[2];
+function saveMangaListWeb( mangaListWeb ) {
+    // convert mangas into stored structure
+    let mangas = mangaListWeb.map( ( manga ) => {
+        return {
+            id: mangaIdenifier( manga.u ),
+            title: manga.t
+        };
+    } );
+    saveFileJSON( `./cdn/mangas.json`, JSON.stringify( mangas, null, 2 ) );
 }
 
 /**
  * 
- * @param {*} uri 
+ * @param {*} mangaWeb 
+ * @param {*} chapterListWeb 
  */
-function chapterIdentifier( uri ) {
-    let parts = url.parse( uri, true );
-    let name = parts.pathname.split( '/' )[3];
-    let id = parts.query['id'];
-    return ( id ? id : name );
+function saveChapterListWeb( mangaWeb, chapterListWeb ) {
+    // convert chapters into stored structure
+    let chapters = chapterListWeb.map( ( chapter ) => {
+        return {
+            id: chapterIdentifier( chapter.u ),
+            title: chapter.t,
+            language: chapter.l,
+            scanlator: chapter.g,
+            volume: chapter.v,
+            number: chapter.n
+        };
+    } );
+    saveFileJSON( `./cdn/${ mangaIdenifier( mangaWeb.u ) }/chapters.json`, JSON.stringify( chapters, null, 2 ) );
 }
 
 /**
@@ -72,20 +110,21 @@ function chapterExist( file ) {
  * 
  * @param {*} chapterListWeb 
  */
-function syncChapters( chapterListWeb, callback, chapterIndex ) {
+function syncChapters( mangaWeb, chapterListWeb, callback, chapterIndex ) {
     chapterIndex = chapterIndex || 0;
     if( chapterIndex >= chapterListWeb.length ) {
+        saveChapterListWeb( mangaWeb, chapterListWeb );
         if( callback ) {
             callback( null );
         }
         return;
     }
     let chapterWeb = chapterListWeb[chapterIndex];
-    let pagesFile = `./cdn/${ mangaIdenifier( chapterWeb.u ) }/${ chapterIdentifier( chapterWeb.u ) }.json`;
+    let pagesFile = `./cdn/${ mangaIdenifier( mangaWeb.u ) }/${ chapterIdentifier( chapterWeb.u ) }.json`;
     // check if this chapter already exist and has pages
     if( chapterExist( pagesFile ) ) {
         // process next chapter
-        setTimeout( syncChapters.bind( null, chapterListWeb, callback, chapterIndex + 1 ), 0 );
+        setTimeout( syncChapters.bind( null, mangaWeb, chapterListWeb, callback, chapterIndex + 1 ), 0 );
         return;
     }
     // get pages from web
@@ -96,7 +135,7 @@ function syncChapters( chapterListWeb, callback, chapterIndex ) {
             saveFileJSON( pagesFile, JSON.stringify( pageListWeb, null, 2 ) );
         }
         // process next chapter
-        setTimeout( syncChapters.bind( null, chapterListWeb, callback, chapterIndex + 1 ), 5000 );
+        setTimeout( syncChapters.bind( null, mangaWeb, chapterListWeb, callback, chapterIndex + 1 ), pageDelay );
     } );
 }
 
@@ -109,7 +148,7 @@ function syncChapters( chapterListWeb, callback, chapterIndex ) {
 function syncMangas( mangaListWeb, mangaLimit, mangaIndex ) {
     mangaIndex = mangaIndex || 0;
     mangaLimit = mangaLimit || mangaListWeb.length;
-    if( mangaIndex >= mangaLimit ) {
+    if( mangaIndex >= mangaLimit || mangaIndex >= mangaListWeb.length ) {
         return;
     }
     let mangaWeb = mangaListWeb[mangaIndex];
@@ -118,24 +157,14 @@ function syncMangas( mangaListWeb, mangaLimit, mangaIndex ) {
     hakuneko.kissmanga.getChapters( mangaWeb, function( error, chapterListWeb ) {
         if( !error && chapterListWeb && chapterListWeb.length > 0 ) {
             console.log( '  CHAPTERS:', chapterListWeb.length );
-            // convert chapters into stored structure
-            let chapters = chapterListWeb.map( ( chapter ) => {
-                return {
-                    id: chapterIdentifier( chapter.u ),
-                    title: chapter.t,
-                    language: chapter.l,
-                    scanlator: chapter.g,
-                    volume: chapter.v,
-                    number: chapter.n
-                };
-            } );
-            // save chapter list to repository
-            saveFileJSON( `./cdn/${ mangaIdenifier( mangaWeb.u ) }/chapters.json`, JSON.stringify( chapters, null, 2 ) );
             // process all chapters for this manga
-            syncChapters( chapterListWeb, ( error ) => {
+            syncChapters( mangaWeb, chapterListWeb, ( error ) => {
                 // process next manga
-                setTimeout( syncMangas.bind( null, mangaListWeb, mangaLimit, mangaIndex + 1 ), 0 );
+                setTimeout( syncMangas.bind( null, mangaListWeb, mangaLimit, mangaIndex + 1 ), chapterDelay );
             } );
+        } else {
+            console.log( '  CHAPTERS: -' );
+            setTimeout( syncMangas.bind( null, mangaListWeb, mangaLimit, mangaIndex + 1 ), chapterDelay );
         }
     } );
 }
@@ -146,17 +175,9 @@ function syncMangas( mangaListWeb, mangaLimit, mangaIndex ) {
 
 hakuneko.kissmanga.getMangas( function( error, mangaListWeb ) {
     if( !error && mangaListWeb && mangaListWeb.length > 0 ) {
-        // convert mangas into stored structure
-        let mangas = mangaListWeb.map( ( manga ) => {
-            return {
-                id: mangaIdenifier( manga.u ),
-                title: manga.t
-            };
-        } );
-        // save manga list to repository
-        saveFileJSON( `./cdn/mangas.json`, JSON.stringify( mangas, null, 2 ) );
+        saveMangaListWeb( mangaListWeb );
         // process all mangas for this connector
-//        syncMangas( mangaListWeb, /* 500 */ );
+//        syncMangas( mangaListWeb/*, 500 */ );
     } else {
         console.error( 'Invalid manga list' );
     }
